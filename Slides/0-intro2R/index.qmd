---
title: "Introduction to R"
subtitle: "Brief introduction for STATA users<br><br><small>Data Analytics Unit</small>"
format:
  revealjs: 
    theme: [simple, custom.scss]
editor: visual
---

# Intro

## What is R? {.smaller}

- R is a high-level programming language for statistical computing and data visualization.
- It is a dialect of the S programming language.
- It is the second most popular programming language for data science just behind Python.
- Paradigm:
  - [Functional Programming]{.high}
  - [Object-oriented]{.high}
- Latest version: R 4.3.0 launched in April, 2023

## Popularity {.smaller}
- According to Google Trends, R is around 10 times more popular than Stata in Google Searches:

![](media/trends.png)

## RStudio I {.smaller}
- R is a language [NOT]{.high} a program.
- You can interact directly with your computer by opening the terminal and write there.
- People usually use an Integrated Development Environment (IDE) to interact with their machines using R.
- The most commonly IDE when working with R is RStudio
- Latest version for Mac: 2023.03.1

## RStudio II
![](media/rstudio.png)

## R Scripts {.smaller}
:::: {.columns}

::: {.column width="70%"}
![](media/script-example.png)
:::

::: {.column width="30%"}
- Scripts are the most important part of RStudio.
- Equivalent to do-files in Stata.
- Cornerstone of reproducibility.
:::

::::

# R vs Stata

## Data and Objects {.smaller}

:::: {.columns}

::: {.column width="48%"}
[Stata]{.chead}

- You can have [only one]{.high} data set open at a time
- You can save matrices, globals and locals as secondary objects
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
[R]{.chead}

- You can load [multiple]{.high} data sets as your memory allows it.
- Everything you load or save is saved as an [object]{.high} in the Global Environment
- You haave a wide range of data types at your disposal: data frames, functions, vectors, values, lists, tupples, matrices, etc.
:::

::::

## Global Environment

![](media/genv.png)

##  Base Functionalities {.smaller}

:::: {.columns}

::: {.column width="48%"}
[Stata]{.chead}

- Stata is mainly developed by STATA Corp
- Most of the commands you use on a daily basis are out-of-the-box (2GB)
- Commands written by the community are secondary
- You install [commands]{.high} using `ssc install`
- Commands are always ready to be used
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
[R]{.chead}

- Most popular packages are maintained (not developed) by Posit
- R comes with a very limited set of functions in the **R base** version (90MB)
- You depend a lot of the community and their developments
- You install [packages]{.high} using `install.packages()`
- Packages come with a wide range of [functions]{.high}
:::

::::

## Libraries {.smaller}
- You always need to load packages outside the [R base]{.high} version:

```{.r}
library(tidyverse)
library(sf)
```

- We use the [pacman]{.high} library to load our packages:
```{.r}
# Required packages
library(pacman)

p_load(char = c(
  # Visualizations
  "showtext", "ggtext", "ggsankey", "patchwork",
  
  # Data Loading
  "haven", "readxl",
  
  # GIS
  "tmaptools", "rmapshaper", "sf",
  
  # Good 'ol Tidyverse
  "tidyverse"
  
))

```


## The Tidyverse {.smaller}
- The tidyverse is a collection of packages designed for data science. 
- These packages are actively developed by the community and maintained by **Posit**. 
- They share an underlying [design philosophy]{.high}, grammar, and data structures.
- Due to how they complement each other, it is very difficult to distinguish between individual packages.
- They have come to replace many of the functionalities from the **base** version of R.
- Due to their importance, they are always loaded in every script.
- More information on [**tidyverse.org**](https://www.tidyverse.org/)

## Base R vs Tidyverse {.smaller}

[Base R:]{.chead}

```{.r}
# Loading CSV data
dataFrame <- read.csv("data.csv")

# Creating a new variable
dataFrame$age_square <- age^2

# Subsetting the data frame
dataFrame <- dataFrame[dataFrame$age_square >= 250, ]

# Merging
merge(dataFrame, aux_data, by = "id")
```

[Tidyverse:]{.chead}

```{.r}
# Loading CSV data
dataFrame <- read_csv("data.csv")

# Creating a variable, subsetting and merging:
dataFrame <- dataFrame %>%
  mutate(age_square = age^2) %>%
  filter(age_square >= 250) %>%
  left_join(aux_data, by = "id")
```

## Stata vs Tidyverse {.smaller}

[Stata:]{.chead}

```{.stata}
# Loading CSV data
import delimited "data.csv", clear

# Creating a new variable
gen age^2

# Subsetting the data frame
keep if age_square >= 250

# Merging
merge 1:1 id using "aux_data"

# Collapsing data
collapse (mean) age_square, by(country)
```

[Tidyverse:]{.chead}

```{.r}
# Loading CSV data
dataFrame <- read_csv("data.csv")

# Manipulating data 
dataFrame_new <- dataFrame %>%     # Saving as a different object
  mutate(age_square = age^2) %>%
  filter(age_square >= 250) %>%
  left_join(aux_data, by = "id") %>%
  group_by(country) %>%
  summarise(age_square = mean(age_square))
```

## Functional Programming {.smaller}

:::: {.columns}

::: {.column width="48%"}
[Stata]{.chead}

- Stata is designed around [commands]{.high} in which you define options and arguments.
- Thanks to the [ado]{.high} and [mata]{.high} languages, you can write your own commands.
- All commands must be named using `program define`

```{.stata}
program define my_function
  display "Hello, world"
end
```
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
[R]{.chead}

- R is designed around [functions]{.high} where you only define arguemts.
- R allows you to write named and [lambda]{.high} functions.
- Lambda functions are functions that you write on the go and directly apply to the data without having to save it or write a script just for the function.
- You create functions using `function()`

```{.r}
function(){
  print("Hello, world")
}
```
:::

::::

## Overall Comparison {.smaller}

:::: {.columns}

::: {.column width="48%"}
[Stata]{.chead}

- Syntax has a low learning curve
- Highly specialized, straightforward commands
- Slow development of new features
- Limited harmonization with other languages and tools: python, markdown, git, html
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
[R]{.chead}

- Syntax has a very steep learning curve
- Less specialized, but more flexible options
- Faster development of new packages
- Advanced capabilities and harmonization with other languages and tools: python, markdown, git, html
:::

::::


# Workflow

## Git and GitHub


## Our Workflow

## Explaining the Cluster Analysis